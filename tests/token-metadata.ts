/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from "@metaplex-foundation/beet";
import {
  CreateMasterEditionArgs,
  createMasterEditionArgsBeet,
  CreateMetadataAccountArgs,
  createMetadataAccountArgsBeet,
  CreateMetadataAccountArgsV2,
  createMetadataAccountArgsV2Beet,
} from "@metaplex-foundation/mpl-token-metadata";
import * as web3 from "@solana/web3.js";
import * as splToken from "@solana/spl-token";

/**
 * @category Instructions
 * @category CreateMetadataAccountV2
 * @category generated
 */
export type CreateMetadataAccountV2InstructionArgs = {
  createMetadataAccountArgsV2: CreateMetadataAccountArgsV2;
};
/**
 * @category Instructions
 * @category CreateMetadataAccountV2
 * @category generated
 */
const CreateMetadataAccountV2Struct = new beet.FixableBeetArgsStruct<
  CreateMetadataAccountV2InstructionArgs & {
    instructionDiscriminator: number;
  }
>(
  [
    ["instructionDiscriminator", beet.u8],
    ["createMetadataAccountArgsV2", createMetadataAccountArgsV2Beet],
  ],
  "CreateMetadataAccountV2InstructionArgs"
);
/**
 * Accounts required by the _CreateMetadataAccountV2_ instruction
 *
 * @property [_writable_] metadata Metadata key (pda of ['metadata', program id, mint id])
 * @property [] mint Mint of token asset
 * @property [**signer**] mintAuthority Mint authority
 * @property [**signer**] payer payer
 * @property [] updateAuthority update authority info
 * @category Instructions
 * @category CreateMetadataAccountV2
 * @category generated
 */
export type CreateMetadataAccountV2InstructionAccounts = {
  metadata: web3.PublicKey;
  mint: web3.PublicKey;
  mintAuthority: web3.PublicKey;
  payer: web3.PublicKey;
  updateAuthority: web3.PublicKey;
};

const createMetadataAccountV2InstructionDiscriminator = 16;

/**
 * Creates a _CreateMetadataAccountV2_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateMetadataAccountV2
 * @category generated
 */
export function createCreateMetadataAccountV2Instruction(
  accounts: CreateMetadataAccountV2InstructionAccounts,
  args: CreateMetadataAccountV2InstructionArgs
) {
  const { metadata, mint, mintAuthority, payer, updateAuthority } = accounts;

  const [data] = CreateMetadataAccountV2Struct.serialize({
    instructionDiscriminator: createMetadataAccountV2InstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: metadata,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: mint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: mintAuthority,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: updateAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey(
      "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s"
    ),
    keys,
    data,
  });
  return ix;
}

/**
 * @category Instructions
 * @category CreateMetadataAccount
 * @category generated
 */
export type CreateMetadataAccountInstructionArgs = {
  createMetadataAccountArgs: CreateMetadataAccountArgs;
};

/**
 * @category Instructions
 * @category CreateMetadataAccount
 * @category generated
 */
const CreateMetadataAccountStruct = new beet.FixableBeetArgsStruct<
  CreateMetadataAccountInstructionArgs & {
    instructionDiscriminator: number;
  }
>(
  [
    ["instructionDiscriminator", beet.u8],
    ["createMetadataAccountArgs", createMetadataAccountArgsBeet],
  ],
  "CreateMetadataAccountInstructionArgs"
);
/**
 * Accounts required by the _CreateMetadataAccount_ instruction
 *
 * @property [_writable_] metadata Metadata key (pda of ['metadata', program id, mint id])
 * @property [] mint Mint of token asset
 * @property [**signer**] mintAuthority Mint authority
 * @property [**signer**] payer payer
 * @property [] updateAuthority update authority info
 * @category Instructions
 * @category CreateMetadataAccount
 * @category generated
 */
export type CreateMetadataAccountInstructionAccounts = {
  metadata: web3.PublicKey;
  mint: web3.PublicKey;
  mintAuthority: web3.PublicKey;
  payer: web3.PublicKey;
  updateAuthority: web3.PublicKey;
};

const createMetadataAccountInstructionDiscriminator = 0;

/**
 * Creates a _CreateMetadataAccount_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateMetadataAccount
 * @category generated
 */
export function createCreateMetadataAccountInstruction(
  accounts: CreateMetadataAccountInstructionAccounts,
  args: CreateMetadataAccountInstructionArgs
) {
  const { metadata, mint, mintAuthority, payer, updateAuthority } = accounts;

  const [data] = CreateMetadataAccountStruct.serialize({
    instructionDiscriminator: createMetadataAccountInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: metadata,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: mint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: mintAuthority,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: updateAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey(
      "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s"
    ),
    keys,
    data,
  });
  return ix;
}

/**
 * @category Instructions
 * @category CreateMasterEditionV3
 * @category generated
 */
export type CreateMasterEditionV3InstructionArgs = {
  createMasterEditionArgs: CreateMasterEditionArgs;
};
/**
 * @category Instructions
 * @category CreateMasterEditionV3
 * @category generated
 */
const CreateMasterEditionV3Struct = new beet.FixableBeetArgsStruct<
  CreateMasterEditionV3InstructionArgs & {
    instructionDiscriminator: number;
  }
>(
  [
    ["instructionDiscriminator", beet.u8],
    ["createMasterEditionArgs", createMasterEditionArgsBeet],
  ],
  "CreateMasterEditionV3InstructionArgs"
);
/**
 * Accounts required by the _CreateMasterEditionV3_ instruction
 *
 * @property [_writable_] edition Unallocated edition V2 account with address as pda of ['metadata', program id, mint, 'edition']
 * @property [_writable_] mint Metadata mint
 * @property [**signer**] updateAuthority Update authority
 * @property [**signer**] mintAuthority Mint authority on the metadata's mint - THIS WILL TRANSFER AUTHORITY AWAY FROM THIS KEY
 * @property [**signer**] payer payer
 * @property [_writable_] metadata Metadata account
 * @category Instructions
 * @category CreateMasterEditionV3
 * @category generated
 */
export type CreateMasterEditionV3InstructionAccounts = {
  edition: web3.PublicKey;
  mint: web3.PublicKey;
  updateAuthority: web3.PublicKey;
  mintAuthority: web3.PublicKey;
  payer: web3.PublicKey;
  metadata: web3.PublicKey;
};

const createMasterEditionV3InstructionDiscriminator = 17;

/**
 * Creates a _CreateMasterEditionV3_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateMasterEditionV3
 * @category generated
 */
export function createCreateMasterEditionV3Instruction(
  accounts: CreateMasterEditionV3InstructionAccounts,
  args: CreateMasterEditionV3InstructionArgs
) {
  const { edition, mint, updateAuthority, mintAuthority, payer, metadata } =
    accounts;

  const [data] = CreateMasterEditionV3Struct.serialize({
    instructionDiscriminator: createMasterEditionV3InstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: edition,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: mint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: updateAuthority,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: mintAuthority,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: metadata,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey(
      "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s"
    ),
    keys,
    data,
  });
  return ix;
}

/**
 * @category Instructions
 * @category VerifyCollection
 * @category generated
 */
const VerifyCollectionStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number;
}>([["instructionDiscriminator", beet.u8]], "VerifyCollectionInstructionArgs");
/**
 * Accounts required by the _VerifyCollection_ instruction
 *
 * @property [_writable_] metadata Metadata account
 * @property [**signer**] collectionAuthority Collection Update authority
 * @property [**signer**] payer payer
 * @property [] collectionMint Mint of the Collection
 * @property [] collection Metadata Account of the Collection
 * @property [] collectionMasterEditionAccount MasterEdition2 Account of the Collection Token
 * @category Instructions
 * @category VerifyCollection
 * @category generated
 */
export type VerifyCollectionInstructionAccounts = {
  metadata: web3.PublicKey;
  collectionAuthority: web3.PublicKey;
  payer: web3.PublicKey;
  collectionMint: web3.PublicKey;
  collection: web3.PublicKey;
  collectionMasterEditionAccount: web3.PublicKey;
};

const verifyCollectionInstructionDiscriminator = 18;

/**
 * Creates a _VerifyCollection_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 *
 * @category Instructions
 * @category VerifyCollection
 * @category generated
 */
export function createVerifyCollectionInstruction(
  accounts: VerifyCollectionInstructionAccounts
) {
  const {
    metadata,
    collectionAuthority,
    payer,
    collectionMint,
    collection,
    collectionMasterEditionAccount,
  } = accounts;

  const [data] = VerifyCollectionStruct.serialize({
    instructionDiscriminator: verifyCollectionInstructionDiscriminator,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: metadata,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: collectionAuthority,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: collectionMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: collection,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: collectionMasterEditionAccount,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey(
      "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s"
    ),
    keys,
    data,
  });
  return ix;
}
